%author Diem Vu
% 6/7/2019
% project assignment 2 TCSS 380

-module('pr2_tests').
-include_lib("eunit/include/eunit.hrl").

%test for dominoes
dominoes_1_test() ->
    [{0,0},{0,1},{0,2},{1,1},{1,2},{2,2}] == pr2_R:dominoes(2).

%test for dominoes
dominoes_2_test() ->
    [{0,0},{0,1},{1,1}] == pr2_R:dominoes(1).

%test for dominoes
dominoes_3_test() ->
    [{0,0},{0,1},{0,2},{0,3},{1,1},{1,2},{1,3},{2,2},{2,3},{3,3}] == pr2_R:dominoes(3).

%test for dominoes
dominoes_4_test() ->
    [{0,0},{0,1},{1,1}] =/= pr2_R:dominoes(2).

%test for giveRandom
giveRandom_test() ->
    L = [{0,0},{0,1},{0,2},{0,3},{0,4},{1,1},{1,2},{1,3}, {1,4},{2,2},{2,3},{2,4},{3,3},{3,4},{4,4}],
    io:format("Number of total trials 10~n"),
    giveRandom_test_Helper(10,0,L).

%helper method to see how many unique solution giveRandom can create 
giveRandom_test_Helper(0, Count, _) -> io:format("Number of unique lists generated by giveRandom ~w~n", [Count]);
giveRandom_test_Helper(Total, Count, L) ->
    A = pr2_R:giveRandom(L),
    B = pr2_R:giveRandom(L),
    Equal = A == B,
    case Equal of
        false -> giveRandom_test_Helper(Total -1, Count +1, L);
        true-> giveRandom_test_Helper(Total -1, Count , L)
    end.

%test for isRing
isRing_1_test() ->
    L = [{0,3},{1,3},{1,1},{0,1},{0,0},{0,2},{2,3}],
    false == pr2_R: isRing(L).

%test for isRing
isRing_2_test() ->
    L = [{0,3},{1,3},{1,1},{0,1},{0,0},{0,2},{2,0}],
    false == pr2_R: isRing(L).

%test for isRing
isRing_3_test() ->
    L = [ {2, 1}, {1 , 1}, {1 , 0}, {0 , 0}, {2 , 0}, {2 , 2} ],
    true == pr2_R: isRing(L).

%test for flip
flip_1_test() ->
    L1 = [ {2, 1}, {1 , 1}, {1 , 0}, {0 , 0}, {0 , 2}, {2 , 2} ],
    L2 = [ {1, 2}, {1 , 1}, {0 , 1}, {0 , 0}, {2 , 0}, {2 , 2} ],
    L1 == pr2_R:flip(L2).

%test for flip
flip_2_test() ->
    L2 = [{3,3},{0,3},{0,1},{1,3},{2,3},{2,2}],
    L1 = [],
    L1 == pr2_R:flip(L2).

%test for solution
solution_1_test() ->
    [] == pr2_R:solution(3).

%test for solution
solution_2_test() ->
    L = pr2_R:solution(2),
    pr2_R: isRing(L).

%test for solution
solution_3_test() ->
    L = pr2_R:solution(10),
    pr2_R: isRing(L).

%test for listAsString 
listAsString_1_test() ->
    L = [{0,0},{0,1},{0,2},{0,3},{1,1},{1,2},{1,3},{2,2},{2,3},{3,3}],
    S = "[{0, 0}, {0, 1}, {0, 2}, {0, 3}, {1, 1}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {3, 3}]",
    S == pr2_R:listAsString(L).

%test for listAsString 
listAsString_2_test() ->
    L = [{0,0},{0,1},{0,2}],
    S = "[{0, 0}, {0, 1}, {0, 2}]",
    S == pr2_R:listAsString(L).

%test for listAsString 
listAsString_3_test() ->
    L = [],
    S = "[]",
    S == pr2_R:listAsString(L).

%test for driver
driver_1_test() ->
    "[]" == pr2_R:driver(fun pr2_R:listAsString/1, fun pr2_R: solution/1, 3).

%test for driver
driver_2_test() ->
    pr2_R:driver(fun pr2_R:listAsString/1, fun pr2_R: solution/1, 2).